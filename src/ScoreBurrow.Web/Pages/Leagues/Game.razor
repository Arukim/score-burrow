@page "/leagues/{LeagueId:guid}/game/{GameId:guid}"

<PageTitle>Game Details</PageTitle>

@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory
@using ScoreBurrow.Data
@using ScoreBurrow.Data.Entities
@using ScoreBurrow.Data.Enums
@inject ScoreBurrowDbContext DbContext
@inject IMemoryCache MemoryCache
@inject NavigationManager NavigationManager

<h1>Game Details</h1>

@if (game == null)
{
    if (isLoading)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            Game not found.
        </div>
    }
}
else
{
    <div class="mb-4">
        <div class="row">
            <div class="col-md-8">
                <h2>@game.MapName</h2>
                <div class="mt-3">
                    <div class="mb-2">
                        <strong>Game Status:</strong>
                        <span class="badge @(GetStatusBadgeClass(game.Status))">@GetStatusDisplayName(game.Status)</span>
                    </div>
                    <div class="mb-2">
                        <strong>Started:</strong> @game.StartTime.ToString("MMM dd, yyyy HH:mm")
                    </div>
                    @if (game.EndTime.HasValue)
                    {
                        <div class="mb-2">
                            <strong>Ended:</strong> @game.EndTime.Value.ToString("MMM dd, yyyy HH:mm")
                        </div>
                    }
                    @if (!string.IsNullOrWhiteSpace(game.Notes))
                    {
                        <div class="mb-2">
                            <strong>Notes:</strong> @game.Notes
                        </div>
                    }
                </div>
            </div>
            <div class="col-md-4">
                <div class="mt-3">
                    <a href="/leagues/@LeagueId" class="btn btn-outline-secondary">
                        <span class="oi oi-chevron-left" aria-hidden="true"></span> Back to League
                    </a>
                </div>
            </div>
        </div>
    </div>

    <h3>Participants</h3>
    @if (!game.Participants.Any())
    {
        <div class="alert alert-info">
            <em>No participants found for this game.</em>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Player</th>
                        <th>Position</th>
                        <th>Town</th>
                        <th>Hero</th>
                        <th>Color</th>
                        <th>Gold Trade</th>
                        <th>Technical Loss</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var participant in game.Participants.OrderBy(p => p.Position))
                    {
                        <tr class="@(participant.IsWinner ? "table-success" : "")">
                            <td>
                                @(!string.IsNullOrWhiteSpace(participant.LeagueMembership.PlayerDisplayName) ?
                                    participant.LeagueMembership.PlayerDisplayName :
                                    participant.LeagueMembership.PlayerNickname)
                                @if (participant.IsWinner)
                                {
                                    <span class="badge bg-success ms-1">Winner</span>
                                }
                            </td>
                            <td>@participant.Position@(GetOrdinalSuffix(participant.Position))</td>
                            <td>@participant.Town?.Name</td>
                            <td>@participant.Hero?.Name</td>
                            <td><span class="badge bg-info">@participant.PlayerColor.ToString()</span></td>
                            <td class="@(participant.GoldTrade != 0 ? "text-primary" : "")">
                                @(participant.GoldTrade > 0 ? "+" : "")@participant.GoldTrade
                            </td>
                            <td>@(participant.IsTechnicalLoss ? "Yes" : "No")</td>
                            <td>
                                <a href="/leagues/@LeagueId/player/@participant.LeagueMembershipId" class="btn btn-sm btn-outline-primary">
                                    View Player <span class="oi oi-person" aria-hidden="true"></span>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@code {
    [Parameter]
    public Guid LeagueId { get; set; }

    [Parameter]
    public Guid GameId { get; set; }

    private GameView? game;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        isLoading = false;
    }

    private async Task LoadDataAsync()
    {
        var cacheKey = $"game_{GameId}";

        if (!MemoryCache.TryGetValue(cacheKey, out GameView? cachedGame))
        {
            var gameData = await DbContext.Games
                .AsNoTracking()
                .Include(g => g.Participants)
                .ThenInclude(p => p.LeagueMembership)
                .Include(g => g.Participants)
                .ThenInclude(p => p.Town)
                .Include(g => g.Participants)
                .ThenInclude(p => p.Hero)
                .Include(g => g.Winner)
                .FirstOrDefaultAsync(g => g.Id == GameId && g.LeagueId == LeagueId);

            if (gameData == null)
                return;

            game = new GameView
            {
                Id = gameData.Id,
                StartTime = gameData.StartTime,
                EndTime = gameData.EndTime,
                MapName = gameData.MapName,
                Status = gameData.Status,
                Notes = gameData.Notes,
                Participants = gameData.Participants ?? new List<GameParticipant>(),
                Winner = gameData.Winner
            };

            // Cache for 15 minutes since game data is more stable
            var cacheOptions = new MemoryCacheEntryOptions()
                .SetSlidingExpiration(TimeSpan.FromMinutes(15));

            MemoryCache.Set(cacheKey, game, cacheOptions);

            cachedGame = game;
        }
        else
        {
            game = cachedGame;
        }
    }

    private string GetStatusBadgeClass(GameStatus status)
    {
        return status switch
        {
            GameStatus.Completed => "bg-success",
            GameStatus.InProgress => "bg-primary",
            GameStatus.Cancelled => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetStatusDisplayName(GameStatus status)
    {
        return status switch
        {
            GameStatus.Completed => "Completed",
            GameStatus.InProgress => "In Progress",
            GameStatus.Cancelled => "Cancelled",
            _ => "Unknown"
        };
    }

    private string GetOrdinalSuffix(int number)
    {
        if (number <= 0) return number.ToString();

        if (number % 100 is >= 11 and <= 13) return "th";

        return (number % 10) switch
        {
            1 => "st",
            2 => "nd",
            3 => "rd",
            _ => "th"
        };
    }

    private class GameView
    {
        public Guid Id { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime? EndTime { get; set; }
        public string MapName { get; set; } = string.Empty;
        public GameStatus Status { get; set; }
        public string? Notes { get; set; }
        public ICollection<GameParticipant> Participants { get; set; } = new List<GameParticipant>();
        public LeagueMembership? Winner { get; set; }
    }
}
