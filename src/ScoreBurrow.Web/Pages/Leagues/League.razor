@page "/leagues/{LeagueId:guid}"

<PageTitle>League - @(league?.Name ?? "Unknown")</PageTitle>

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory
@using ScoreBurrow.Data
@using ScoreBurrow.Data.Entities
@using ScoreBurrow.Data.Enums
@using ScoreBurrow.Web.Services
@inject ScoreBurrowDbContext DbContext
@inject IMemoryCache MemoryCache
@inject NavigationManager NavigationManager
@inject ILeagueService LeagueService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>League @(league?.Name ?? "Unknown")</h1>

@if (league == null)
{
    if (isLoading)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            League not found or you don't have permission to view it.
        </div>
    }
}
else
{
    @if (!league.IsActive)
    {
        <div class="alert alert-warning" role="alert">
            <span class="oi oi-warning me-2"></span>
            <strong>This league is archived.</strong> It is hidden from the public leagues list.
        </div>
    }

    <div class="mb-4">
        @if (!string.IsNullOrWhiteSpace(league.Description))
        {
            <p class="lead">@league.Description</p>
        }
        <div class="mb-3">
            <small class="text-muted">
                Created: @(league?.CreatedDate.ToString("MMM dd, yyyy") ?? "Unknown")
                <span class="ms-3">Members: <strong>@(topPlayers?.Count ?? 0)</strong></span>
                <span class="ms-3">Total Games: <strong>@totalGames</strong></span>
                @if (gamePages > 1)
                {
                    <span class="ms-3">Page @(currentGamePage)</span>
                }
            </small>
        </div>
        <div class="mb-3">
            <a href="/leagues" class="btn btn-outline-secondary">
                <span class="oi oi-chevron-left" aria-hidden="true"></span> Back to Leagues
            </a>
            @if (canManageLeague)
            {
                <a href="/leagues/@LeagueId/manage" class="btn btn-primary ms-2">
                    <span class="oi oi-cog me-1" aria-hidden="true"></span> Manage League
                </a>
            }
        </div>
    </div>

    <!-- Top Players Section -->
    <div class="row mb-5">
        <div class="col-12">
            <h2 class="mb-3">Top Players</h2>
            @if (topPlayers == null || !topPlayers.Any())
            {
                <div class="alert alert-info">
                    <em>No players found in this league.</em>
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var player in topPlayers)
                    {
                        <div class="col-md-4 mb-3">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h6 class="card-title">
                                        @(!string.IsNullOrWhiteSpace(player.PlayerDisplayName) ? player.PlayerDisplayName : player.PlayerNickname)
                                        @if (player.IsUnregistered)
                                        {
                                            <span class="badge bg-warning ms-1">Unregistered</span>
                                        }
                                    </h6>
                                    <div class="mb-2">
                                        <span class="badge bg-primary">
                                            Rating: @player.Glicko2Rating.ToString("F0")
                                        </span>
                                    </div>
                                    <div class="small text-muted mb-2">
                                        Games Played: @player.GamesPlayed<br>
                                        Win Rate: @(player.WinRate.HasValue ? $"{player.WinRate.Value:F1}%" : "N/A")
                                        @if (player.GamesPlayed > 0)
                                        {
                                            <br>@("Favorite Town: ")@(player.FavoriteTownName ?? "N/A")
                                        }
                                    </div>
                                    <a href="@($"/leagues/{LeagueId}/player/{player.LeagueMembershipId}")" class="btn btn-outline-primary btn-sm">
                                        View Profile <span class="oi oi-person" aria-hidden="true"></span>
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Games Section -->
    <div class="row">
        <div class="col-12">
            <h2 class="mb-3">Recent Games</h2>
            @if (games == null || !games.Any())
            {
                <div class="alert alert-info">
                    <em>No games found in this league.</em>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Map</th>
                                <th>Status</th>
                                <th>Players</th>
                                <th>Winner</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var game in games)
                            {
                                <tr>
                                    <td>@game.StartTime.ToString("MMM dd, yyyy HH:mm")</td>
                                    <td>@game.MapName</td>
                                    <td>
                                        <span class="badge @(GetStatusBadgeClass(game.Status))">
                                            @GetStatusDisplayName(game.Status)
                                        </span>
                                    </td>
                                    <td>@game.Participants?.Count participants</td>
                                    <td>
                                        @if (game.Winner != null)
                                        {
                                            @(!string.IsNullOrWhiteSpace(game.Winner.PlayerDisplayName) ?
                                                game.Winner.PlayerDisplayName :
                                                game.Winner.PlayerNickname)
                                        }
                                        else
                                        {
                                            <em>N/A</em>
                                        }
                                    </td>
                                    <td>
                                        <a href="@($"/leagues/{LeagueId}/game/{game.Id}")" class="btn btn-sm btn-outline-primary">
                                            View <span class="oi oi-eye" aria-hidden="true"></span>
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (gamePages > 1)
                {
                    <nav aria-label="Games pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentGamePage == 1 ? "disabled" : "")">
                                <a class="page-link" href="/leagues/@LeagueId?gamePage=@(currentGamePage - 1)" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                            @{
                                int startPage = Math.Max(1, currentGamePage - 2);
                                int endPage = Math.Min(gamePages, currentGamePage + 2);
                            }
                            @for (int i = startPage; i <= endPage; i++)
                            {
                                var pageNum = i;
                                <li class="page-item @(currentGamePage == pageNum ? "active" : "")">
                                    <a class="page-link" href="/leagues/@LeagueId?gamePage=@pageNum">@pageNum</a>
                                </li>
                            }
                            <li class="page-item @(currentGamePage == gamePages ? "disabled" : "")">
                                <a class="page-link" href="/leagues/@LeagueId?gamePage=@(currentGamePage + 1)" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        </ul>
                    </nav>
                }
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid LeagueId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int GamePage { get; set; } = 1;

    private ScoreBurrow.Data.Entities.League? league;
    private List<TopPlayerView>? topPlayers;
    private List<GameView>? games;
    private bool isLoading = true;
    private bool canManageLeague = false;
    private string? userId;
    private int currentGamePage = 1;
    private int gamePages = 1;
    private int totalGames = 0;
    private const int GamesPerPage = 50;

    protected override async Task OnInitializedAsync()
    {
        currentGamePage = GamePage > 0 ? GamePage : 1;
        
        // Get current user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }
        
        await LoadDataAsync();
        isLoading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        currentGamePage = GamePage > 0 ? GamePage : 1;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        // Make cache key user-specific to avoid showing guest cached data to owners
        var cacheKey = $"league_{LeagueId}_{userId ?? "anonymous"}";

        if (!MemoryCache.TryGetValue(cacheKey, out LeagueData? cachedLeagueData))
        {
            // Get league with basic info
            var leagueData = await DbContext.Leagues
                .AsNoTracking()
                .FirstOrDefaultAsync(l => l.Id == LeagueId);

            if (leagueData == null)
                return;

            // If league is archived, check if user is the owner or a member
            if (!leagueData.IsActive)
            {
                if (string.IsNullOrEmpty(userId))
                {
                    // Anonymous users can't access archived leagues
                    return;
                }

                // Allow access if user is owner or member
                var isOwnerOrMember = (leagueData.OwnerId == userId) ||
                                     await LeagueService.IsMemberAsync(userId, LeagueId);

                if (!isOwnerOrMember)
                {
                    // User is neither owner nor member, don't show archived league
                    return;
                }
            }

            league = leagueData;

            // Get top players - get memberships first
            var topMemberships = await DbContext.LeagueMemberships
                .AsNoTracking()
                .Include(m => m.Statistics)
                .ThenInclude(s => s!.FavoriteTown)
                .Where(m => m.LeagueId == LeagueId)
                .OrderByDescending(m => m.Glicko2Rating)
                .Take(10)
                .ToListAsync();

            // Build top players view
            topPlayers = new List<TopPlayerView>();
            foreach (var membership in topMemberships)
            {
                // Count games played by this player in this league
                var gamesPlayed = await DbContext.GameParticipants
                    .AsNoTracking()
                    .Where(gp => gp.LeagueMembershipId == membership.Id && gp.Game.LeagueId == LeagueId)
                    .CountAsync();

                decimal? winRate = null;
                string? favoriteTownName = null;

                if (membership.Statistics != null)
                {
                    favoriteTownName = membership.Statistics.FavoriteTown?.Name;
                    if (membership.Statistics.GamesPlayed > 0)
                    {
                        winRate = (decimal)membership.Statistics.GamesWon * 100 / membership.Statistics.GamesPlayed;
                    }
                }

                topPlayers.Add(new TopPlayerView
                {
                    LeagueMembershipId = membership.Id,
                    PlayerNickname = membership.PlayerNickname,
                    PlayerDisplayName = membership.PlayerDisplayName,
                    Glicko2Rating = membership.Glicko2Rating,
                    IsUnregistered = membership.UserId == null,
                    GamesPlayed = gamesPlayed,
                    WinRate = winRate,
                    FavoriteTownName = favoriteTownName
                });
            }

            // Get games pagination info
            totalGames = await DbContext.Games
                .AsNoTracking()
                .Where(g => g.LeagueId == LeagueId)
                .CountAsync();

            gamePages = (int)Math.Ceiling(totalGames / (double)GamesPerPage);

            if (currentGamePage > gamePages && gamePages > 0)
            {
                NavigationManager.NavigateTo($"/leagues/{LeagueId}?gamePage={gamePages}");
                return;
            }

            // Get games for current page
            var gamesData = await DbContext.Games
                .AsNoTracking()
                .Where(g => g.LeagueId == LeagueId)
                .OrderByDescending(g => g.StartTime)
                .Skip((currentGamePage - 1) * GamesPerPage)
                .Take(GamesPerPage)
                .Include(g => g.Participants)
                .Include(g => g.Winner)
                .ToListAsync();

            games = gamesData.Select(g => new GameView
            {
                Id = g.Id,
                StartTime = g.StartTime,
                MapName = g.MapName,
                Status = g.Status,
                Participants = g.Participants ?? new List<GameParticipant>(),
                Winner = g.Winner
            }).ToList();

            // Cache for 10 minutes with sliding expiration
            cachedLeagueData = new LeagueData
            {
                League = league,
                TopPlayers = topPlayers,
                Games = games
            };

            var cacheOptions = new MemoryCacheEntryOptions()
                .SetSlidingExpiration(TimeSpan.FromMinutes(10));

            MemoryCache.Set(cacheKey, cachedLeagueData, cacheOptions);
        }
        else
        {
            league = cachedLeagueData!.League;
            topPlayers = cachedLeagueData.TopPlayers;
            games = cachedLeagueData.Games;

            // Calculate total games from cached data
            totalGames = await DbContext.Games
                .AsNoTracking()
                .Where(g => g.LeagueId == LeagueId)
                .CountAsync();

            gamePages = (int)Math.Ceiling(totalGames / (double)GamesPerPage);
        }
        
        // Always recalculate canManageLeague (not cached) to ensure it's up-to-date
        if (!string.IsNullOrEmpty(userId) && league != null)
        {
            canManageLeague = await LeagueService.IsAdminOrOwnerAsync(userId, LeagueId);
        }
    }

    private string GetStatusBadgeClass(GameStatus status)
    {
        return status switch
        {
            GameStatus.Completed => "bg-success",
            GameStatus.InProgress => "bg-primary",
            GameStatus.Cancelled => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetStatusDisplayName(GameStatus status)
    {
        return status switch
        {
            GameStatus.Completed => "Completed",
            GameStatus.InProgress => "In Progress",
            GameStatus.Cancelled => "Cancelled",
            _ => "Unknown"
        };
    }

    private class LeagueData
    {
        public ScoreBurrow.Data.Entities.League? League { get; set; }
        public List<TopPlayerView>? TopPlayers { get; set; }
        public List<GameView>? Games { get; set; }
    }

    private class TopPlayerView
    {
        public Guid LeagueMembershipId { get; set; }
        public string PlayerNickname { get; set; } = string.Empty;
        public string? PlayerDisplayName { get; set; }
        public double Glicko2Rating { get; set; }
        public bool IsUnregistered { get; set; }
        public int GamesPlayed { get; set; }
        public decimal? WinRate { get; set; }
        public string? FavoriteTownName { get; set; }
    }

    private class GameView
    {
        public Guid Id { get; set; }
        public DateTime StartTime { get; set; }
        public string MapName { get; set; } = string.Empty;
        public GameStatus Status { get; set; }
        public ICollection<GameParticipant> Participants { get; set; } = new List<GameParticipant>();
        public LeagueMembership? Winner { get; set; }
    }
}
